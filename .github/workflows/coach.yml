name: Coach Feed

on:
  push:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  coach:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with history for diffs
        uses: actions/checkout@v4
        with:
          fetch-depth: 20

      - name: Detect stacks
        id: detect
        run: |
          echo "has_node=false" >> $GITHUB_OUTPUT
          echo "has_python=false" >> $GITHUB_OUTPUT
          [ -f package.json ] && echo "has_node=true" >> $GITHUB_OUTPUT
          { [ -f requirements.txt ] || ls -1 **/requirements.txt 2>/dev/null; } && echo "has_python=true" >> $GITHUB_OUTPUT

      - name: Setup Node
        if: steps.detect.outputs.has_node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Python
        if: steps.detect.outputs.has_python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Node deps
        if: steps.detect.outputs.has_node == 'true'
        continue-on-error: true
        run: |
          if [ -f package-lock.json ]; then npm ci || npm install; else npm install || true; fi

      - name: Install Python deps
        if: steps.detect.outputs.has_python == 'true'
        continue-on-error: true
        run: |
          [ -f requirements.txt ] && pip install -r requirements.txt || true
          if [ -d tests ] || ls -1 **/tests 2>/dev/null; then
            python - <<'PY'
import importlib, subprocess, sys
try: importlib.import_module("pytest")
except ImportError: subprocess.check_call([sys.executable, "-m", "pip", "install", "pytest"])
PY
          fi

      - name: Build diff summary
        id: diff
        run: |
          set -e
          if [ "${{ github.event_name }}" = "push" ]; then
            BEFORE="${{ github.event.before }}"; AFTER="${{ github.event.after }}"
            if [ "$BEFORE" = "0000000000000000000000000000000000000000" ] || [ -z "$BEFORE" ]; then
              RANGE="HEAD~1..HEAD"
            else
              RANGE="$BEFORE..$AFTER"
            fi
          else
            git fetch --all --prune
            A=$(git rev-parse HEAD); B=$(git rev-parse HEAD~1); RANGE="$B..$A"
          fi

          {
            echo "## Changed files"
            echo '```'
            git diff --name-only $RANGE || true
            echo '```'

            echo
            echo "## Short diff (first 200 lines)"
            echo '```diff'
            git diff --unified=1 $RANGE | head -n 200 || true
            echo '```'
          } > coach_summary.md

      - name: Resolve issue number from variable or fallback
        id: issue
        uses: actions/github-script@v7
        env:
          COACH_ISSUE: ${{ vars.COACH_ISSUE }}
        with:
          script: |
            const {owner, repo} = context.repo;
            let n = process.env.COACH_ISSUE && /^\d+$/.test(process.env.COACH_ISSUE)
              ? parseInt(process.env.COACH_ISSUE, 10)
              : null;

            // If a number is provided, verify it exists
            if (n) {
              try {
                await github.rest.issues.get({owner, repo, issue_number: n});
              } catch (e) {
                n = null; // invalid or missing, fall through
              }
            }

            if (!n) {
              // Try to find an open issue titled exactly "Coach Feed"
              const res = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} is:issue in:title "Coach Feed" state:open`
              });
              if (res.data.total_count > 0) {
                n = res.data.items[0].number;
              } else {
                // Create one if missing
                const created = await github.rest.issues.create({
                  owner, repo, title: "Coach Feed",
                  body: "Automated diagnostics stream. Pin this issue for easy access."
                });
                n = created.data.number;
              }
            }

            core.setOutput("number", String(n));

      - name: Post comment to issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number("${{ steps.issue.outputs.number }}"),
              body: fs.readFileSync('coach_summary.md','utf8')
            });

      - name: Footer
        run: |
          {
            echo
            echo "---"
            echo "Repo: ${{ github.repository }}"
            echo "Ref: ${{ github.ref }}"
            echo "Run: ${{ github.run_id }}"
            echo "Event: ${{ github.event_name }}"
            echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S") UTC"
          } >> coach_summary.md
